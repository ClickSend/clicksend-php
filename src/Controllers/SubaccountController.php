<?php
/*
 * ClickSendV3APILib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 03/01/2016
 */

namespace ClickSendV3APILib\Controllers;

use ClickSendV3APILib\APIException;
use ClickSendV3APILib\APIHelper;
use ClickSendV3APILib\Configuration;
use Unirest\Unirest;
class SubaccountController {

    /* private fields for configuration */

    /**
     * your username 
     * @var string
     */
    private $username;

    /**
     * your api key 
     * @var string
     */
    private $key;

    /**
     * Constructor with authentication and configuration parameters
     */
    function __construct($username, $key)
    {
        $this->username = $username ? $username : Configuration::$username;
        $this->key = $key ? $key : Configuration::$key;
    }

    /**
     * Get all subaccounts
     * @return string response from the API call*/
    public function getSubaccounts () 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/subaccounts';

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers, NULL, $this->username, $this->key);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('BAD_REQUEST', 400, $response->body);
        }

        else if ($response->code == 401) {
            throw new APIException('UNAUTHORIZED', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('FORBIDDEN', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('NOT_FOUND', 404, $response->body);
        }

        else if ($response->code == 405) {
            throw new APIException('METHOD_NOT_FOUND', 405, $response->body);
        }

        else if ($response->code == 429) {
            throw new APIException('TOO_MANY_REQUESTS', 429, $response->body);
        }

        else if ($response->code == 500) {
            throw new APIException('INTERNAL_SERVER_ERROR', 500, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Create new subaccount
     * @param  array         $apiUsername          Required parameter: Your new api username.
     * @param  string        $password             Required parameter: Your new password
     * @param  string        $email                Required parameter: Your new email.
     * @param  string        $phoneNumber          Required parameter: Your phone number in E.164 format.
     * @param  string        $firstName            Required parameter: Your firstname
     * @param  string        $lastName             Required parameter: Your lastname
     * @param  bool|null     $accessUsers          Optional parameter: Your access users flag value, must be 1 or 0.
     * @param  bool|null     $accessBilling        Optional parameter: Your access billing flag value, must be 1 or 0.
     * @param  bool|null     $accessReporting      Optional parameter: Your access reporting flag value, must be 1 or 0.
     * @param  bool|null     $accessContacts       Optional parameter: Your access contacts flag value, must be 1 or 0.
     * @param  bool|null     $accessSettings       Optional parameter: Your access settings flag value, must be 1 or 0.
     * @return string response from the API call*/
    public function createSubaccount (
                $apiUsername,
                $password,
                $email,
                $phoneNumber,
                $firstName,
                $lastName,
                $accessUsers = NULL,
                $accessBilling = NULL,
                $accessReporting = NULL,
                $accessContacts = NULL,
                $accessSettings = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/subaccounts';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'api_username'     => $apiUsername,
            'password'         => $password,
            'email'            => $email,
            'phone_number'     => $phoneNumber,
            'first_name'       => $firstName,
            'last_name'        => $lastName,
            'access_users'     => (null != $accessUsers) ? var_export($accessUsers, true) : true,
            'access_billing'   => (null != $accessBilling) ? var_export($accessBilling, true) : true,
            'access_reporting' => (null != $accessReporting) ? var_export($accessReporting, true) : true,
            'access_contacts'  => (null != $accessContacts) ? var_export($accessContacts, true) : false,
            'access_settings'  => (null != $accessSettings) ? var_export($accessSettings, true) : true,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'     => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::post($queryUrl, $headers, NULL, $this->username, $this->key);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('BAD_REQUEST', 400, $response->body);
        }

        else if ($response->code == 401) {
            throw new APIException('UNAUTHORIZED', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('FORBIDDEN', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('NOT_FOUND', 404, $response->body);
        }

        else if ($response->code == 405) {
            throw new APIException('METHOD_NOT_FOUND', 405, $response->body);
        }

        else if ($response->code == 429) {
            throw new APIException('TOO_MANY_REQUESTS', 429, $response->body);
        }

        else if ($response->code == 500) {
            throw new APIException('INTERNAL_SERVER_ERROR', 500, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Get specific subaccount
     * @param  int     $subaccountId      Required parameter: TODO: type description here
     * @return string response from the API call*/
    public function getSubaccount (
                $subaccountId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/subaccounts/{{subaccount_id}}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'subaccount_id' => $subaccountId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers, NULL, $this->username, $this->key);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('BAD_REQUEST', 400, $response->body);
        }

        else if ($response->code == 401) {
            throw new APIException('UNAUTHORIZED', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('FORBIDDEN', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('NOT_FOUND', 404, $response->body);
        }

        else if ($response->code == 405) {
            throw new APIException('METHOD_NOT_FOUND', 405, $response->body);
        }

        else if ($response->code == 429) {
            throw new APIException('TOO_MANY_REQUESTS', 429, $response->body);
        }

        else if ($response->code == 500) {
            throw new APIException('INTERNAL_SERVER_ERROR', 500, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Delete a subaccount
     * @param  int     $subaccountId      Required parameter: TODO: type description here
     * @return string response from the API call*/
    public function deleteSubaccount (
                $subaccountId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/subaccounts/{{subaccount_id}}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'subaccount_id' => $subaccountId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::delete($queryUrl, $headers, NULL, $this->username, $this->key);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('BAD_REQUEST', 400, $response->body);
        }

        else if ($response->code == 401) {
            throw new APIException('UNAUTHORIZED', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('FORBIDDEN', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('NOT_FOUND', 404, $response->body);
        }

        else if ($response->code == 405) {
            throw new APIException('METHOD_NOT_FOUND', 405, $response->body);
        }

        else if ($response->code == 429) {
            throw new APIException('TOO_MANY_REQUESTS', 429, $response->body);
        }

        else if ($response->code == 500) {
            throw new APIException('INTERNAL_SERVER_ERROR', 500, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Regenerate an API Key
     * @param  int     $subaccountId      Required parameter: TODO: type description here
     * @return string response from the API call*/
    public function regenerateApiKey (
                $subaccountId) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/subaccounts/{{subaccount_id}}/regen-api-key';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'subaccount_id' => $subaccountId,
            ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::put($queryUrl, $headers, NULL, $this->username, $this->key);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('BAD_REQUEST', 400, $response->body);
        }

        else if ($response->code == 401) {
            throw new APIException('UNAUTHORIZED', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('FORBIDDEN', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('NOT_FOUND', 404, $response->body);
        }

        else if ($response->code == 405) {
            throw new APIException('METHOD_NOT_FOUND', 405, $response->body);
        }

        else if ($response->code == 429) {
            throw new APIException('TOO_MANY_REQUESTS', 429, $response->body);
        }

        else if ($response->code == 500) {
            throw new APIException('INTERNAL_SERVER_ERROR', 500, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
    /**
     * Update subaccount
     * @param  int             $subaccountId         Required parameter: TODO: type description here
     * @param  string|null     $password             Optional parameter: TODO: type description here
     * @param  string|null     $email                Optional parameter: TODO: type description here
     * @param  string|null     $phoneNumber          Optional parameter: TODO: type description here
     * @param  string|null     $firstName            Optional parameter: TODO: type description here
     * @param  string|null     $lastName             Optional parameter: TODO: type description here
     * @param  bool|null       $accessUsers          Optional parameter: Example: 1
     * @param  bool|null       $accessBilling        Optional parameter: Example: 1
     * @param  bool|null       $accessReporting      Optional parameter: Example: 1
     * @param  bool|null       $accessContacts       Optional parameter: Example: 0
     * @param  bool|null       $accessSettings       Optional parameter: Example: 1
     * @return string response from the API call*/
    public function updateSubaccount (
                $subaccountId,
                $password = NULL,
                $email = NULL,
                $phoneNumber = NULL,
                $firstName = NULL,
                $lastName = NULL,
                $accessUsers = NULL,
                $accessBilling = NULL,
                $accessReporting = NULL,
                $accessContacts = NULL,
                $accessSettings = NULL) 
    {
        //the base uri for api requests
        $queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $queryBuilder = $queryBuilder.'/subaccounts/{{subaccount_id}}';

        //process optional query parameters
        APIHelper::appendUrlWithTemplateParameters($queryBuilder, array (
            'subaccount_id'    => $subaccountId,
            ));

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            'password'         => $password,
            'email'            => $email,
            'phone_number'     => $phoneNumber,
            'first_name'       => $firstName,
            'last_name'        => $lastName,
            'access_users'     => (null != $accessUsers) ? var_export($accessUsers, true) : true,
            'access_billing'   => (null != $accessBilling) ? var_export($accessBilling, true) : true,
            'access_reporting' => (null != $accessReporting) ? var_export($accessReporting, true) : true,
            'access_contacts'  => (null != $accessContacts) ? var_export($accessContacts, true) : false,
            'access_settings'  => (null != $accessSettings) ? var_export($accessSettings, true) : true,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            'user-agent'     => 'APIMATIC 2.0'
        );

        //prepare API request
        $request = Unirest::put($queryUrl, $headers, NULL, $this->username, $this->key);

        //and invoke the API call request to fetch the response
        $response = Unirest::getResponse($request);

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('BAD_REQUEST', 400, $response->body);
        }

        else if ($response->code == 401) {
            throw new APIException('UNAUTHORIZED', 401, $response->body);
        }

        else if ($response->code == 403) {
            throw new APIException('FORBIDDEN', 403, $response->body);
        }

        else if ($response->code == 404) {
            throw new APIException('NOT_FOUND', 404, $response->body);
        }

        else if ($response->code == 405) {
            throw new APIException('METHOD_NOT_FOUND', 405, $response->body);
        }

        else if ($response->code == 429) {
            throw new APIException('TOO_MANY_REQUESTS', 429, $response->body);
        }

        else if ($response->code == 500) {
            throw new APIException('INTERNAL_SERVER_ERROR', 500, $response->body);
        }

        else if (($response->code < 200) || ($response->code > 206)) { //[200,206] = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code, $response->body);
        }

        return $response->body;
    }
        
}